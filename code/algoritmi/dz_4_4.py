"""
Задание 4.
Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.
Сделайте профилировку каждого алгоритма через timeit
Попытайтесь написать третью версию, которая будет самой быстрой и по возможности самой лаконичной.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.
Без аналитики задание считается не принятым!

"""

import random
from timeit import timeit

array = [random.randint(0, 20) for el in range(20)]


def example_1():
    p = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > p:
            p = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {p} раз(а)'


def example_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def example_3():
    numb = max(array, key=array.count)
    return f"Чаще всего встречается число {numb}, оно появилось в массиве {array.count(numb)} раз(а)"


print(example_1())
print(example_2())
print(example_3())

print(timeit("example_1()", globals=globals()))
print(timeit("example_2()", globals=globals()))
print(timeit("example_3()", globals=globals()))

"""
Второй вариант всегда самый долгий.
Это связано с тем, что в рамках функции example_2 формируется
новый массив чисел из количества включений числа изначального массива, т.е.
для каждого числа изначального массива
считается, сколько раз оно включается в массив (функция "пробегает" по всему массиву),
и это число включается в новый массив. 
Далее определяется максимум нового массива, т.е. снова анализируется весь новый массив.

Третий вариант, всегда самый быстрый, потому что у него сразу определяется максимум
из количества включений числа в массив.

"""
